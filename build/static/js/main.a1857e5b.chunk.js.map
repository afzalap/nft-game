{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","a","console","log","mintCharacterNFT","mintTxn","wait","warn","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfUserHasNFT","characterNFT","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","getCharacters","getAllDefaultCharacters","charactersTxn","map","error","on","off","length","character","index","src","alt","type","onClick","Arena","boss","setBoss","showToast","setShowToast","attackState","setAttackState","runAttackAction","attackBoss","txn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1857e5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xa06C94B7171198aCf2fa5362460B2f1AFC1C6D18';\r\n\r\nconst transformCharacterData = (characterData) => {\r\n    return {\r\n        name: characterData.name,\r\n        imageURI: characterData.imageURI,\r\n        hp: characterData.hp.toNumber(),\r\n        maxHp: characterData.maxHp.toNumber(),\r\n        attackDamage: characterData.attackDamage.toNumber(),\r\n    };\r\n};\r\n\r\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport LoadingIndicator from '../LoadingIndicator';\r\n\r\n\r\n\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n    // Render Methods\r\n    const renderCharacters = () =>\r\n        characters.map((character, index) => (\r\n            <div className=\"character-item\" key={character.name}>\r\n                <div className=\"name-container\">\r\n                    <p>{character.name}</p>\r\n                </div>\r\n                <img src={character.imageURI} alt={character.name} />\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"character-mint-button\"\r\n                    onClick={mintCharacterNFTAction(index)}\r\n                >{`Mint ${character.name}`}</button>\r\n            </div>\r\n        ));\r\n\r\n    const mintCharacterNFTAction = (characterId) => async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setMintingCharacter(true);\r\n                console.log('Minting character in progress...');\r\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n                await mintTxn.wait();\r\n                console.log('mintTxn:', mintTxn);\r\n                setMintingCharacter(false);\r\n            }\r\n        } catch (error) {\r\n            console.warn('MintCharacterAction Error:', error);\r\n        }\r\n    };\r\n\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n\r\n        alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\r\n\r\n        console.log(\r\n            // console.log(gameContract.address);\r\n            `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n        );\r\n\r\n        if (gameContract) {\r\n            const characterNFT = await gameContract.checkIfUserHasNFT();\r\n            console.log('CharacterNFT: ', characterNFT);\r\n            setCharacterNFT(transformCharacterData(characterNFT));\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            /*\r\n             * This is the big difference. Set our gameContract in state.\r\n             */\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log('Ethereum object not found');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const getCharacters = async () => {\r\n            try {\r\n                console.log('Getting contract characters to mint');\r\n\r\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n                console.log('charactersTxn:', charactersTxn);\r\n\r\n                const characters = charactersTxn.map((characterData) =>\r\n                    transformCharacterData(characterData)\r\n                );\r\n\r\n                setCharacters(characters);\r\n            } catch (error) {\r\n                console.error('Something went wrong fetching characters:', error);\r\n            }\r\n        };\r\n\r\n        if (gameContract) {\r\n            getCharacters();\r\n\r\n            /*\r\n             * Setup NFT Minted Listener\r\n             */\r\n            gameContract.on('CharacterNFTMinted', onCharacterMint);\r\n        }\r\n\r\n        return () => {\r\n            /*\r\n             * When your component unmounts, let;s make sure to clean up this listener\r\n             */\r\n            if (gameContract) {\r\n                gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n            }\r\n        };\r\n    }, [gameContract]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"select-character-container\">\r\n            <h2>Mint Your Hero. Choose wisely.</h2>\r\n            {/* Only show this when there are characters in state */}\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">{renderCharacters()}</div>\r\n            )}\r\n            {mintingCharacter && (\r\n                <div className=\"loading\">\r\n                    <div className=\"indicator\">\r\n                        <LoadingIndicator />\r\n                        <p>Minting In Progress...</p>\r\n                    </div>\r\n                    <img\r\n                        src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n                        alt=\"Minting loading indicator\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport './Arena.css';\r\nimport LoadingIndicator from '../LoadingIndicator';\r\n\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n    // State\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [boss, setBoss] = useState(null);\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [attackState, setAttackState] = useState('');\r\n\r\n\r\n\r\n    const runAttackAction = async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setAttackState('attacking');\r\n                console.log('Attacking boss...');\r\n                const txn = await gameContract.attackBoss();\r\n                await txn.wait();\r\n                console.log(txn);\r\n                setAttackState('hit');\r\n\r\n                /*\r\n                * Set your toast state to true and then false 5 seconds later\r\n                */\r\n                setShowToast(true);\r\n                setTimeout(() => {\r\n                    setShowToast(false);\r\n                }, 5000);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error attacking boss:', error);\r\n            setAttackState('');\r\n        }\r\n    };\r\n\r\n    // UseEffects\r\n    useEffect(() => {\r\n        const fetchBoss = async () => {\r\n            const bossTxn = await gameContract.getBigBoss();\r\n            console.log('Boss:', bossTxn);\r\n            setBoss(transformCharacterData(bossTxn));\r\n        };\r\n\r\n        /*\r\n        * Setup logic when this event is fired off\r\n        */\r\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n            const bossHp = newBossHp.toNumber();\r\n            const playerHp = newPlayerHp.toNumber();\r\n\r\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n            /*\r\n            * Update both player and boss Hp\r\n            */\r\n            setBoss((prevState) => {\r\n                return { ...prevState, hp: bossHp };\r\n            });\r\n\r\n            setCharacterNFT((prevState) => {\r\n                return { ...prevState, hp: playerHp };\r\n            });\r\n        };\r\n\r\n        if (gameContract) {\r\n            fetchBoss();\r\n            gameContract.on('AttackComplete', onAttackComplete);\r\n        }\r\n\r\n        /*\r\n        * Make sure to clean up this event when this component is removed\r\n        */\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off('AttackComplete', onAttackComplete);\r\n            }\r\n        }\r\n    }, [gameContract]);\r\n\r\n    // UseEffects\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log('Ethereum object not found');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n            {/* Add your toast HTML right here */}\r\n            {boss && characterNFT && (\r\n                <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Boss */}\r\n            {boss && (\r\n                <div className=\"boss-container\">\r\n                    <div className={`boss-content  ${attackState}`}>\r\n                        <h2>🔥 {boss.name} 🔥</h2>\r\n                        <div className=\"image-content\">\r\n                            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n                            <div className=\"health-bar\">\r\n                                <progress value={boss.hp} max={boss.maxHp} />\r\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"attack-container\">\r\n                        <button className=\"cta-button\" onClick={runAttackAction}>\r\n                            {`💥 Attack ${boss.name}`}\r\n                        </button>\r\n                    </div>\r\n                    {attackState === 'attacking' && (\r\n                        <div className=\"loading-indicator\">\r\n                            <LoadingIndicator />\r\n                            <p>Attacking ⚔️</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* Character NFT */}\r\n            {characterNFT && (\r\n                <div className=\"players-container\">\r\n                    <div className=\"player-container\">\r\n                        <h2>Your Character</h2>\r\n                        <div className=\"player\">\r\n                            <div className=\"image-content\">\r\n                                <h2>{characterNFT.name}</h2>\r\n                                <img\r\n                                    src={characterNFT.imageURI}\r\n                                    alt={`Character ${characterNFT.name}`}\r\n                                />\r\n                                <div className=\"health-bar\">\r\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stats\">\r\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"active-players\">\r\n          <h2>Active Players</h2>\r\n          <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n        </div> */}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Arena;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  /*\n   * Right under current account, setup this new state property\n   */\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    /*\n     * Scenario #1\n     */\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n       * Scenario #2\n       */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  const runAttackAction = async () => { };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    \n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {/* This is where our button and image code used to be!\n         *\tRemember we moved it into the render method.\n         */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}